from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from db import save_user_config
from wordpress import get_all_categories
import re, sqlite3
from config import DB_PATH

router = Router()

class UserConnect(StatesGroup):
    waiting_for_url = State()
    waiting_for_user = State()
    waiting_for_pass = State()
    waiting_for_channel = State()
    waiting_for_categories = State()

class EditProfile(StatesGroup):
    waiting_for_url = State()
    waiting_for_user = State()
    waiting_for_pass = State()
    waiting_for_channel = State()
    waiting_for_categories = State()

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
def is_valid_url(url):
    return re.match(r'^https?://[\w\.-]+', url)

def is_valid_username(username):
    return len(username) > 2

def is_valid_app_password(password):
    return len(password) >= 16

def is_valid_channel(channel):
    return channel.startswith('@') or re.match(r'^-\d+$', channel)

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—ã–±–æ—Ä –ø–æ ID) ---
def build_category_keyboard(categories, prefix):
    buttons = []
    for cat in categories:
        if cat['id'] == 5:
            continue  # –∏—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ù–æ–≤–æ—Å—Ç–∏" –ø–æ ID
        callback_data = f"{prefix}{cat['id']}"
        if len(callback_data.encode('utf-8')) <= 64:
            buttons.append([InlineKeyboardButton(text=cat['name'], callback_data=callback_data)])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}done")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–æ–º–∞–Ω–¥–∞ /connect ---
@router.message(Command("connect"))
async def connect_cmd(message: Message, state: FSMContext):
    await message.answer("\U0001F310 –í–≤–µ–¥–∏ URL —Å–∞–π—Ç–∞ WordPress (https://example.com):")
    await state.set_state(UserConnect.waiting_for_url)

@router.message(UserConnect.waiting_for_url)
async def get_url(message: Message, state: FSMContext):
    url = message.text.strip()
    if not is_valid_url(url):
        return await message.answer("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π URL. –ü—Ä–∏–º–µ—Ä: https://example.com")
    await state.update_data(url=url)
    await message.answer("\U0001F464 –í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω WordPress:")
    await state.set_state(UserConnect.waiting_for_user)

@router.message(UserConnect.waiting_for_user)
async def get_user(message: Message, state: FSMContext):
    user = message.text.strip()
    if not is_valid_username(user):
        return await message.answer("\u274C –õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
    await state.update_data(user=user)
    await message.answer("\U0001F510 –í–≤–µ–¥–∏ App Password WordPress:")
    await state.set_state(UserConnect.waiting_for_pass)

@router.message(UserConnect.waiting_for_pass)
async def get_pass(message: Message, state: FSMContext):
    passwd = message.text.strip()
    if not is_valid_app_password(passwd):
        return await message.answer("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π App Password.")
    await state.update_data(passwd=passwd)
    await message.answer("\U0001F4E2 –í–≤–µ–¥–∏ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel):")
    await state.set_state(UserConnect.waiting_for_channel)

@router.message(UserConnect.waiting_for_channel)
async def get_channel(message: Message, state: FSMContext):
    channel = message.text.strip()
    if not is_valid_channel(channel):
        return await message.answer("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª.")
    await state.update_data(channel=channel)
    data = await state.get_data()
    try:
        categories = [
            cat for cat in get_all_categories(data['url'], data['user'], data['passwd'])
            if cat.get("parent")
        ]
    except Exception as e:
        await state.clear()
        return await message.answer(f"\u26A0\uFE0F –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    keyboard = build_category_keyboard(categories, prefix="cat_connect_")
    await message.answer(
        "<b>üìÇ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ù–æ–≤–æ—Å—Ç–∏'.</b>\n–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(UserConnect.waiting_for_categories)

@router.callback_query(F.data.startswith("cat_connect_"))
async def select_category_connect(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.replace("cat_connect_", "")
    data = await state.get_data()
    selected = list(data.get("categories", []))
    
    if cat_id == "done":
        if not selected:  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º "–ù–æ–≤–æ—Å—Ç–∏" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            selected.append("5")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_user_config(
            tg_id=callback.from_user.id,
            wp_url=data['url'],
            wp_user=data['user'],
            wp_pass=data['passwd'],
            channel=data['channel'],
            categories=','.join(selected)
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            all_categories = get_all_categories(data['url'], data['user'], data['passwd'])
            selected_names = [
                cat['name'] for cat in all_categories 
                if str(cat['id']) in selected
            ]
            categories_list = "\n".join(f"‚Ä¢ {name}" for name in selected_names)
        except Exception:
            categories_list = ", ".join(selected)
        
        await state.clear()
        await callback.message.edit_reply_markup()
        return await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n{categories_list}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            parse_mode="HTML"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if cat_id in selected:
        selected.remove(cat_id)
    else:
        selected.append(cat_id)
    
    await state.update_data(categories=selected)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    if selected:
        try:
            all_categories = get_all_categories(data['url'], data['user'], data['passwd'])
            selected_names = [
                cat['name'] for cat in all_categories 
                if str(cat['id']) in selected
            ]
            selection_text = "‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ:</b>\n" + "\n".join(f"‚Ä¢ {name}" for name in selected_names)
        except Exception:
            selection_text = f"‚úÖ –í—ã–±—Ä–∞–Ω—ã ID: {', '.join(selected)}"
    else:
        selection_text = "‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.answer()
    await callback.message.edit_text(
        text=f"<b>üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</b>\n\n"
             f"{selection_text}\n\n"
             f"–ù–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b> –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä.",
        reply_markup=build_category_keyboard(
            [cat for cat in get_all_categories(data['url'], data['user'], data['passwd']) if cat.get("parent")],
            prefix="cat_connect_"
        ),
        parse_mode="HTML"
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /edit_profile ---
@router.message(Command("edit_profile"))
async def edit_profile(message: Message, state: FSMContext):
    await message.answer("\U0001F310 –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL —Å–∞–π—Ç–∞ WordPress:")
    await state.set_state(EditProfile.waiting_for_url)

@router.message(EditProfile.waiting_for_url)
async def edit_url(message: Message, state: FSMContext):
    url = message.text.strip()
    if not is_valid_url(url):
        return await message.answer("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π URL.")
    await state.update_data(url=url)
    await message.answer("\U0001F464 –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(EditProfile.waiting_for_user)

@router.message(EditProfile.waiting_for_user)
async def edit_user(message: Message, state: FSMContext):
    user = message.text.strip()
    if not is_valid_username(user):
        return await message.answer("\u274C –õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
    await state.update_data(user=user)
    await message.answer("\U0001F510 –í–≤–µ–¥–∏—Ç–µ App Password:")
    await state.set_state(EditProfile.waiting_for_pass)

@router.message(EditProfile.waiting_for_pass)
async def edit_pass(message: Message, state: FSMContext):
    passwd = message.text.strip()
    if not is_valid_app_password(passwd):
        return await message.answer("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π App Password.")
    await state.update_data(passwd=passwd)
    await message.answer("\U0001F4E2 –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID:")
    await state.set_state(EditProfile.waiting_for_channel)

@router.message(EditProfile.waiting_for_channel)
async def edit_channel(message: Message, state: FSMContext):
    channel = message.text.strip()
    if not is_valid_channel(channel):
        return await message.answer("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞.")
    await state.update_data(channel=channel)
    data = await state.get_data()
    try:
        categories = get_all_categories(data['url'], data['user'], data['passwd'])
    except Exception as e:
        await state.clear()
        return await message.answer(f"\u26A0\uFE0F –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    keyboard = build_category_keyboard(categories, prefix="cat_edit_")
    await message.answer(
    "<b>üìÇ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ù–æ–≤–æ—Å—Ç–∏'.</b>\n–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
    reply_markup=keyboard,
    parse_mode="HTML"
    )

    await state.set_state(EditProfile.waiting_for_categories)

@router.callback_query(F.data.startswith("cat_edit_"))
async def edit_category(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.replace("cat_edit_", "")
    data = await state.get_data()
    selected = list(data.get("categories", []))
    
    if cat_id == "done":
        if not selected:  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º "–ù–æ–≤–æ—Å—Ç–∏" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            selected.append("5")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_user_config(
            tg_id=callback.from_user.id,
            wp_url=data['url'],
            wp_user=data['user'],
            wp_pass=data['passwd'],
            channel=data['channel'],
            categories=','.join(selected)
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            all_categories = get_all_categories(data['url'], data['user'], data['passwd'])
            selected_names = [
                cat['name'] for cat in all_categories 
                if str(cat['id']) in selected
            ]
            categories_list = "\n".join(f"‚Ä¢ {name}" for name in selected_names)
        except Exception:
            categories_list = ", ".join(selected)
        
        await state.clear()
        await callback.message.edit_reply_markup()
        return await callback.message.edit_text(
            f"‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤:</b>\n{categories_list}",
            parse_mode="HTML"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if cat_id in selected:
        selected.remove(cat_id)
    else:
        selected.append(cat_id)
    
    await state.update_data(categories=selected)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    if selected:
        try:
            all_categories = get_all_categories(data['url'], data['user'], data['passwd'])
            selected_names = [
                cat['name'] for cat in all_categories 
                if str(cat['id']) in selected
            ]
            selection_text = "‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ:</b>\n" + "\n".join(f"‚Ä¢ {name}" for name in selected_names)
        except Exception:
            selection_text = f"‚úÖ –í—ã–±—Ä–∞–Ω—ã ID: {', '.join(selected)}"
    else:
        selection_text = "‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.answer()
    await callback.message.edit_text(
        text=f"<b>üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</b>\n\n"
             f"{selection_text}\n\n"
             f"–ù–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b> –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä.",
        reply_markup=build_category_keyboard(
            [cat for cat in get_all_categories(data['url'], data['user'], data['passwd']) if cat.get("parent")],
            prefix="cat_edit_"
        ),
        parse_mode="HTML"
    )

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
@router.message(Command("remove_site"))
async def remove_site_confirm(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_remove"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_remove"),
        ]
    ])
    await message.answer("\u26A0\uFE0F –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WordPress?", reply_markup=keyboard)

@router.callback_query(F.data == "confirm_remove")
async def handle_confirm_remove(callback: CallbackQuery):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM wp_users WHERE telegram_id = ?", (callback.from_user.id,))
    conn.commit()
    conn.close()
    await callback.message.edit_reply_markup()
    await callback.message.edit_text("\U0001F5D1\uFE0F –î–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞ —É–¥–∞–ª–µ–Ω—ã.")

@router.callback_query(F.data == "cancel_remove")
async def handle_cancel_remove(callback: CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.edit_text("\u274C –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")